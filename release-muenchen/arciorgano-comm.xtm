(sys:load "libs/contrib/librs232.xtm")

(bind-func countNumPorts
  (lambda ()
    (let ((n:i64 (i32toi64 (comEnumerate))))
      n)))

(bind-func listAllPorts
  (lambda ()
    (let ((i 0))
      (dotimes (i (countNumPorts))
        (printf "Port #%d: %s\n" i (comGetPortName (i64toi32 i)))))))

(bind-func openSerialPort
  (lambda (index:i32 rate:i32)
    (comOpen index rate)))

(bind-func initPortConnection
  (lambda ()
    (listAllPorts)
    (openSerialPort 2 115200)))

(bind-func writeToPort
  (let ((remap:i8* (halloc 138))
        (i 0))
    (pfill! remap 1 2 3 4 6 5 7 8 9 77 10 11 78 79 12 80 13 14 81 82 15 83 17 16 85 84 18 86 19 20 87 21 22 88 89 23 90 25 24 92 91 26 93 27 28 94 29 30 95 96 31 97 32 33 98 99 34 100 36 35 102 101 37 103 38 39 104 40 41 105 106 42 107 44 43 109 108 45 110 46 47 111 48 49 112 113 50 114 51 52 115 116 53 117 55 54 119 118 56 120 57 58 121 59 60 122 123 61 124 63 62 126 125 64 127 65 66 128 67 68 129 130 69 131 70 71 132 133 72 134 74 73 136 135 75 137 76 138)
    (lambda (index state)
      (let ((buf:i8* (salloc 2)))
        (if (and (> index 0) (< index 139))
          (pset! buf 0 (- (pref remap (- index 1)) 1))
          (pset! buf 0 (i64toi8 index)))
        (if (= state (i64toi8 0))
            (pset! buf 1 0)
            (pset! buf 1 200))
        (comWrite 2 buf 2)))))

(define init-port
  (lambda ()
    (initPortConnection)))

(define arci-comm
  (lambda (key state)
    (writeToPort key state)))

(define prn
  (lambda (nr)
    (writeToPort nr 1)))

(define rln
  (lambda (nr)
    (writeToPort nr 0)))

(define pln
  (lambda (t nr d)
    (callback t 'prn nr)
    (callback (+ t d) 'rln nr)))

(define prnt
  (lambda (t nr)
    (callback t 'prn nr)))

(define rlnt
  (lambda (t nr)
    (callback t 'rln nr)))

(define lamp
  (lambda (state)
    (writeToPort 200 state)))

(define motor
  (lambda (state)
    (writeToPort 201 state)))


(define init-system
  (lambda ()
    (init-port)
    (lamp 1)
    (motor 1)))

(define reset-system
  (lambda ()
    (init-system)
    (swipe-zero 0 (now))))

(define shutdown-system
  (lambda ()
    (lamp 0)
    (motor 0)))

(define swipe-zero
  (lambda (s t)
    (cond ((> s 138) 9)
    (else
      (rln s)
      (callback (+ t 10) 'swipe-zero (+ s 1) (+ t 20))))))

(init-system)
(reset-system)
;(shutdown-system)

(lamp 0)
(motor 0)
