;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; performing score for 5th of December 2019, Gare du Nord Basel
; needs the following additional code files:
; arciorgano-comm.xtm
; implanted-memories-midi.xtm

(define implanted-memories
  (lambda (i performance)
    (let ((composition '(polina korobkova))
          (performance composition)
          (arciorgano 'arciorgano)
          (programming '(johannes keller))
          (artist '(michael kleine))
          (visual-decisions artist))
      (cond
        ((or (equal? i machine) (equal? (programmed? i) #t))
          (my-decision? i))
        (set! performance (not (list 'piece 'music)))
        ((not (member performance)) #t)
        (else
          (set! here (now)))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; intro

(define intro
  (lambda (t)
    (let* ((c1 '(72 83 93 104))
           (c2 '(72 85 93 104))
           (c3 '(73 83 94 106))
           (c4 '(108 119 129 138))
           (c5 '(73 85 94))
           (c6 '(73 83 94 106))
           (vs 22000)
           (s 10000)
           (n 8000)
           (f 5000)
           (vf 1500)
           (h -1)
           (m 0.5))
      ; line 1
      (harp t c1 n (* 13 *second*))
      (set! t (+ t (* (+ 13 18) *second*)))
      (harp t c2 s (* 25 *second*))
      (set! t (+ t (* (+ 25 7) *second*)))
      (pln t 4 (* 10 *second*))
      (pln t 36 (* 10 *second*))
      (tirata (+ t (* 5.5 *second*)) '(72 85 93 106 108 119 129 136 104 121)
                                     '(0.2 0.1 0.05 0.05 0.04 0.04 0.07 0.08 0.1 0.1)
                                     '(-1 -1 -1 -1 -1 -1 -1 100000 100000 88200)
                                     (* (- 9 5.5) *second*))
      (set! t (+ t (* (+ 10 15) *second*)))
      (arp t c3 vf (* 2 *second*))
      (set! t (+ t (* (+ 2 0.21) *second*)))
      ; line 2
      (arp t c4 0 (* 1 *second*))
      (set! t (+ t (* (+ 1 1.34) *second*)))
      (harp t c5 s (* 7 *second*))
      (pln t 106 (* 2.8 *second*))
      (pln (+ t (* 2.7 *second*)) 108 (* 3 *second*))
      (pln (+ t (* 5.5 *second*)) 93 (* 1.5 *second*))
      (set! t (+ t (* (+ 7 45) *second*)))
      (arp t c6 vf (* 4 *second*))
      (set! t (+ t (* (+ 4 12) *second*)))
      (pln t 4 (* (+ 6.5 3.11) *second*))
      (pln t 36 (* (+ 6.5 3.11) *second*))
      (tirata-c (+ t (* 1.21 *second*)) '((94 106 109) (106 109 119) (108 121 129) (104 121 129 136))
                                        '(.2 .15 .1 .35)
                                        '(0 0 0 5000)
                                        (* (- 6.5 1.21) *second*))
     (tirata (+ t (* (+ 6.5 2) *second*)) '(73 83 94 106 108 121 129 135 104 119)
                                           '(.1 .1 .1 .1 .1 .1 .1 .1 .1 .1)
                                           '(-1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
                                           (* (- 3.11 2) *second*))
      ; line 3
      (set! t (+ t (* (+ 6.5 3.11 17) *second*)))
      (pln t 4 (* (+ 2.3 4.2) *second*))
      (pln t 36 (* (+ 2.3 4.2) *second*))
      (tirata (+ t (* 1.8 *second*)) '(73 83 94 106 108 121)
                                     '(.166 .166 .166 .166 .166 .166)
                                     '(-1 -1 -1 -1 -1 -1)
                                     (* (- 2.3 1.8) *second*))
      (tirata (+ t (* (+ 2.3 1.1) *second*)) '(72 85 93 106 108 119 129 104 121)
                                             '(0.2 0.1 0.05 0.05 0.04 0.07 0.08 0.08 0.1)
                                             '(-1 44100 -1 44100 44100 -1 -1 -1 -1)
                                             (* (- 4.2 1.1) *second*))
      (set! t (+ t (* (+ 2.3 4.2 2) *second*)))
      (pln t 135 (* 16 *second*))
      (pln t 136 (* 16 *second*))
      (set! t (+ t (* (+ 16 0.4) *second*)))
      (arp t '(73 83 94 106) vf (* 4 *second*))
      (set! t (+ t (* (+ 4 0.33) *second*)))
      (harp t '(72 85 94 106) s (* 9.5 *second*))
      (set! t (+ t (* (+ 9.5 22) *second*)))
      (arp t '(72 85 94 106) vf (* 0.5 *second*))
      (set! t (+ t (* (+ 0.5 11) *second*)))
      (arp t '(72 85 94 106) vf (* 0.7 *second*))
      (set! t (+ t (* (+ 0.7 9) *second*)))
      (tirata-c t '((72) (83 93 104) (73) (85 93 108) (73) (83 93 106) (72))
                  '(.14 .14 .14 .14 .14 .14 .14)
                  '(0 0 0 0 0 0 0)
                  (* 2 *second*))
      (set! t (+ t (* (+ 2 0.32) *second*)))
      (arp t '(73 106 72 93 104 105) 0 (* 62 *second*))
      (set! t (+ t (* (+ 62 0.17) *second*)))
      (pln t 135 (* 6 *second*))
      (pln t 136 (* 6 *second*))
      (set! t (+ t (* (+ 6 0.56) *second*)))
      (harp t '(72 83 93) n (* 1.4 *second*))
      (set! t (+ t (* (+ 1.4 12) *second*)))
      (arp t '(72 85 93) 0 (* 0.85 *second*))
      (set! t (+ t (* (+ 0.85 25) *second*)))
      (tirata-c t '((72) (83 93 104) (73) (85 93 108) (7) (83 93 106) (72) (47 58 104) (83 93 104) (83 93 109) (72) (49 58 70))
                  '(.07 .07 .07 .07 .07 .07 .07 .07 .07 .07 .07 .07 .07 .07)
                  '(0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                  (* 4.2 *second*))
      (set! t (+ t (* (+ 4.2 32) *second*)))
      (tirata-c t '((72 85 93) (72 85 93) (72 85 93))
                  '(.3 .4 .33)
                  '(9000 9000 9000)
                  (* 2.1 *second*))
      (set! t (+ t (* (+ 2.1 8) *second*)))
      (tirata-c t '((7) (83 93 106) (49 94 108) (73) (58 85 109) (42) (47 57 68))
                  '(.14 .14 .14 .14 .14 .14 .14)
                  '(0 0 0 0 0 0 0)
                  (* 2 *second*))
      (set! t (+ t (* (+ 2 3) *second*)))
      (arp t '(7 47 57 106) vf (* 43.1 *second*))
      (set! t (+ t (* (+ 43.1 17) *second*)))
      (pln t 4 (* (+ 3.11 8) *second*))
      (pln t 36 (* (+ 3.11 8) *second*))
      (tirata (+ t (* 1.8 *second*)) '(73 83 94 106 108 121 129 104 119 136)
                                     '(.1 .1 .1 .1 .1 .1 .1 .1 .1 .1)
                                     '(22000 -1 -1 18000 -1 -1 -1 -1 -1 -1)
                                     (* (- 3.11 1.8) *second*))
      (tirata-c (+ t (* (+ 3.11 2.4) *second*)) '((93 106 109) (106 109 119) (108 119 129) (104 119 129 136))
                                                '(.15 .15 .3 .4)
                                                '(8000 8000 0 4000)
                                                (* (- 8 2.4) *second*))
      (set! t (+ t (* (+ 3.11 8) *second*)))
      (tirata-c t '((106 109 119) (108 119 129) (104 119 129 136))
                  '(.33 .33 .33)
                  '(0 0 0)
                  (* 1.4 *second*))
      (set! t (+ t (* 1.4 *second*)))
      (pln t 4 (* (+ 3.11) *second*))
      (pln t 36 (* (+ 3.11) *second*))
      (tirata (+ t (* 2.3 *second*)) '(73 47 130 34 108 121 57 106 47 136)
                                     '(.1 .1 .1 .1 .1 .1 .1 .1 .1 .1)
                                     '(-1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
                                     (* (- 3.11 2.3) *second*))
      (set! t (+ t (* (+ 3.11 9) *second*)))
      (tirata-c t '((72 85 93 104) (72 85 93 104) (72 85 93 104) (72 85 93 104) (72 85 93 104))
                  '(.2 .2 .2 .2 .2)
                  '(2000 2000 2000 2000 2000)
                  (* 1.2 *second*))
      (+ t (* (+ 9 1.2) *second*)))))

(define arp
  (lambda (t l s d)
    (cond
      ((null? l) 0)
      ((< d 0) 0)
      (else
        (pln t (car l) d)
        (arp (+ t s) (cdr l) s (- d s))))))

(define harp
  (lambda (t l s d)
    (harploop t l (length l) (* s (length l)) d)))

(define harploop
  (lambda (t l len da d)
    (cond
      ((null? l) 0)
      ((zero? len) 0)
      (else
        (pln t (car l) d)
        (cond
          ((= len 6) (harploop (+ t (* 0.3 da)) (cdr l) (- len 1) da (- d (* 0.3 da))))
          ((= len 5) (harploop (+ t (* 0.2 da)) (cdr l) (- len 1) da (- d (* 0.2 da))))
          ((= len 4) (harploop (+ t (* 0.2 da)) (cdr l) (- len 1) da (- d (* 0.2 da))))
          ((= len 3) (harploop (+ t (* 0.1 da)) (cdr l) (- len 1) da (- d (* 0.1 da))))
          ((= len 2) (harploop (+ t (* 0.1 da)) (cdr l) (- len 1) da (- d (* 0.1 da))))
          ((= len 1) (harploop (+ t (* 0.1 da)) (cdr l) (- len 1) da (- d (* 0.1 da))))
          (else 0))))))

(define tirata
  (lambda (t pl tl dl d)
    (cond
      ((null? pl) 0)
      (else
        (pln t (car pl) (if (= (car dl) -1)
                               (* (car tl) d 1.3)
                               (car dl)))
        (tirata (+ t (* (car tl) d)) (cdr pl) (cdr tl) (cdr dl) d)))))

(define tirata-c
  (lambda (t pl tl sl d)
    (cond
      ((null? pl) 0)
      (else
        (arp t (car pl) (car sl) (* (car tl) d))
        (tirata-c (+ t (* (car tl) d)) (cdr pl) (cdr tl) (cdr sl) d)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; verse 1

(define verse1
  (lambda (t)
    (let* ((sec 44100)
          (c1 '(72 83 93 104)) ;e7
          (c1. '(73 85 94 106))
          (c2 '(63 72 83 93)) ;c#
          (c2. '(64 73 85 94))
          (c3 '(51 63 72 83)) ;a
          (c3. '(52 64 73 85))
          (c4 '(42 51 63 72)) ;f#
          (c4. '(43 52 64 73))
          (f 4000)
          (art 0.0)
          (loop (lambda (sc)
                  (cond
                    ((null? sc) 0)
                    (else
                      (let ((cmd (car sc)))
                        (harpr t (eval (car cmd)) (rand-range 1000 10000) (* sec (eval (cadr cmd))))
                        (set! t (+ t (* (cadr cmd) sec) (* (eval (caddr cmd)) sec)))
                        (loop (cdr sc))))))))
            (loop '((c1 4.5 0.34) (c2 3.8 0.21) (c3 4.2 art) (c4 4.5 1.2) (c1 3.8 0.85) (c2. 4.2 0.34) (c3 4.5 0.21) (c4 3.8 art)
                    (c1 4.2 1.2) (c2. 4.5 0.85) (c3. 3.8 0.34) (c4 4.2 0.21) (c1 4.5 art) (c2. 3.8 1.2) (c3. 4.2 0.85) (c4. 4.5 0.34)
                    (c1. 3.8 0.21) ((map (lambda (x) (- x 36)) c2.) 4.2 art) (c3. 4.5 1.2) (c4. 3.8 0.85) (c1 4.2 0.34) (c2. 4.5 0.21) (c3. 3.8 art) (c4. 4.2 1.2)
                    (c1 4.5 0.85) (c2 3.8 0.34) (c3. 4.2 4.8)))
            t)))

(define harpr
  (lambda (t l s d)
    (let* ((arpdur (* s (length l)))
           (arpl (generate-arpl (length l) arpdur)))
      (harpr-loop t l arpl d))))

(define harpr-loop
  (lambda (t pl tl d)
    (cond
      ((null? pl) 0)
      (else
        (pln (+ t (car tl)) (car pl) (- d (car tl)))
        (harpr-loop t (cdr pl) (cdr tl) d)))))

(define generate-arpl
  (lambda (n dur)
    (cond
      ((zero? n) '())
      (else
        (cons (rand-range 0 dur) (generate-arpl (- n 1) dur))))))

(define length
  (lambda (l)
    (cond
      ((null? l) 0)
      (else
        (+ 1 (length (cdr l)))))))

(define rand-range
  (lambda (b t)
    (+ b (* (random) (- t b)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pre-chorus 1

(define pre-chorus1
  (lambda (t)
    (let* ((sec 44100)
          (br1 '(63 72 85)) ;c sharp
          (br2 '(66 79 87)) ;d
          (br3 '(72 85 93)) ;e
          (s 0)
          (art 0.2)
          (loop (lambda (sc)
                  (cond
                    ((null? sc) 0)
                    (else
                      (let ((cmd (car sc)))
                        (arp t (eval (car cmd)) (eval (cadr cmd)) (* sec (eval (caddr cmd))))
                        (set! t (+ t (* (caddr cmd) sec) (* (eval (cadddr cmd)) sec)))
                        (loop (cdr sc))))))))
            (loop '((br1 s 1.13 0.53) (br2 s 1 3.8)       (br1 s 1 0.94)    (br2 s 1.05 2.01) (br3 s 3.2 4.06)  (br1 s 1.82 0.18) (br2 s 0.88 1.06) (br1 s 1.91 0.8)  (br2 s 0.27 3)
                    (br1 s 0.23 art)  (br2 s 0.2 17)    (br1 s 1.13 0.53) (br2 s 1 art)     (br1 s 1.13 0.53) (br2 s 1 7)       (br1 s 1 0.94)    (br2 s 1.05 5)    (br3 s 3.2 1.06)  (br1 s 1.82 0.18) (br2 s 0.88 1.06) (br1 s 0.91 1)    (br2 s 1.18 24)
                    (br1 s 1.13 0.53) (br2 s 1 art)     (br1 s 1.13 0.53) (br2 s 1 art)     (br1 s 1.13 0.53) (br2 s 1 1.13)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 3)    (br1 s 1 0.94)    (br2 s 1.05 1.01) (br3 s 7 1.06)
                    (br1 s 1.21 0.81)  (br2 s 0.64 9)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)  (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)  (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.13 0.53) (br2 s 1 art) (br1 s 1.13 0.53) (br2 s 1 art) (br1 s 1.13 0.53) (br2 s 1 art) (br1 s 1.13 0.53) (br2 s 1 art) (br1 s 1.13 0.53) (br2 s 1 art) (br1 s 1.13 0.53) (br2 s 1 art)  (br1 s 1.13 13)
                    (br1 s 1.13 0.53) (br2 s 1 3)    (br1 s 1.13 0.53) (br2 s 1 4)     (br1 s 1.13 0.53) (br2 s 1 1.13)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 7)
                    (br1 s 1 0.94)    (br2 s 1.05 1.01) (br3 s 5 1.06)    (br1 s 1.82 0.18) (br2 s 0.88 1.06) (br1 s 4.7 6)    (br2 s 0.21 art)  (br3 s 9 15)
                    (br1 s 1 0.94)    (br2 s 1.05 1.01) (br3 s 22 1.06)    (br1 s 1.82 0.18) (br2 s 0.88 1.06) (br1 s 0.31 art)  (br2 s 0.2 5)
                    (br1 s 1.13 0.53) (br2 s 1 1.13)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 2)
                    (br1 s 1 0.94)    (br2 s 1.05 1.01) (br3 s 6 1.06)    (br1 s 1.82 0.18)
                    (br2 s 0.88 1.06) (br1 s 1.91 1)    (br2 s 1.18 16)
                    (br1 s 1.13 0.53) (br2 s 1 1.13)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 2)
                    (br1 s 1 0.94)    (br2 s 1.05 1.01) (br3 s 15 194.06)   ;**
                    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 0)))
            t)))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; chorus 1

(define durlist (lambda () 0))

(define chorus1
  (lambda (t)
    (set! durlist (chord-counter (generate-durlist 0 151 '((0 70) (20 75) (24 73) (40 75) (151 75)))))
    (let* ((c1 '(79 88 100)) ;'(73 82 94)) ;e minor
           (c2 '(82 94 103)) ;'(77 88 98)) ;f major
           (c3 '(88 100 109)) ;'(82 94 103)) ;g major
           (c4 '(94 103 115)) ;'(88 98 109)) ;a minor
           (c5 '(64 73 85)) ;'(58 67 79)) ;b minor
           (c6 '(78 87 88 99 114 122)) ;'(72 82 81 93 108 107))
           (c7 '(61 70 78 87)) ;a#
           (c8 '(63 72 83)) ;b
           (c9 '(57 68 78 83)) ;a
           (c10 '(64 73 79 88)) ;b
           (c11 '(51 63 72 78)) ;g
           (vs 22000)
           (s 10000)
           (n 8000)
           (f 5000)
           (vf 2500)
           (h -1)
           (m 0.5)
           (vcoda 85)
           (loop (lambda (sc)
                   (cond
                     ((null? sc) 0)
                     (else
                       (set! t (chord-repeater t (eval (car (car sc))) (eval (car (cdr (car sc)))) (bpmtoedur 75) (eval (car (cdr (cdr (car sc)))))))
                       (loop (cdr sc)))))))
       (loop '((c1 8 h) (c2 8 h) (c3 3 h) (c4 5 h)
               (c1 16 h) (c2 8 h) (c3 3 h) (c4 1 h) (c3 2 m) (c4 1 m)
               (c4 4 h) (c1 8 h) (c5 3 m) (c1 1 m) (c5 2 m) (c1 5 m) (c2 8 h)
               (c3 3 h) (c4 5 h) (c1 8 h) (c3 8 m) (c4 8 m)))
       (harp t c6 s (* 5.8 *second*))
       (set! t (+ t (* (+ 5.8 9) *second*)))
       (loop '((c3 8 m) (c4 5 m)))
       (set! t (+ t (* 3 (bpmtoedur 75)) (* 16 *second*)))
       (loop '((c4 3 m)))
       (arp t c6 f (* 7 *second*))
       (set! t (+ t (* 18 *second*)))
       (arp t c6 vf (* 0.31 *second*))
       (set! t (+ t (* 0.51 *second*)))
       (harp t c6 f (* 3 *second*))
       (set! t (+ t (* (+ 23 3) *second*)))
       (harp t c6 vs (* 12 *second*))
       (set! t (+ t (* (+ 12 8) *second*)))
       (loop '((c3 8 m) (c4 8 m)))
       (arp t c6 vf (* 7.4 *second*))
       (set! t (+ t (* (+ 7.4 4) *second*)))
       (set! t (+ t (bpmtoedur vcoda)))
       (plc t c7 (bpmtoedur vcoda))
       (set! t (+ t (* (bpmtoedur vcoda) 2)))
       (plc t c8 (* (bpmtoedur vcoda) 5))
       (set! t (+ t (* (bpmtoedur vcoda) 6)))
       (plc t c9 (bpmtoedur vcoda))
       (set! t (+ t (* (bpmtoedur vcoda) 2)))
       (plc t c10 (* (bpmtoedur vcoda) 5))
       (set! t (+ t (* (bpmtoedur vcoda) 5) (* 1.2 *second*)))
       (arp t c6 f (* 5.8 *second*))
       (set! t (+ t (* (+ 5.8 3) *second*)))
       (plc (+ t (bpmtoedur vcoda)) c7 (bpmtoedur vcoda))
       (plc (+ t (* (bpmtoedur vcoda) 3)) c8 (* (bpmtoedur vcoda) 5))
       (plc (+ t (* (bpmtoedur vcoda) 9)) c9 (* (bpmtoedur vcoda) 1))
       (plc (+ t (* (bpmtoedur vcoda) 11)) c10 (* (bpmtoedur vcoda) 5))
       (plc (+ t (* (bpmtoedur vcoda) 16)) c9 (* (bpmtoedur vcoda) 0.8))
       (plc (+ t (* (bpmtoedur vcoda) 17)) c9 (* (bpmtoedur vcoda) 1))
       (plc (+ t (* (bpmtoedur vcoda) 19)) c11 (* (bpmtoedur vcoda) 9))
       (plc (+ t (* (bpmtoedur vcoda) 33)) c7 (* (bpmtoedur vcoda) 1))
       (plc (+ t (* (bpmtoedur vcoda) 35)) c8 (* (bpmtoedur vcoda) 5))
       (plc (+ t (* (bpmtoedur vcoda) 41)) c9 (* (bpmtoedur vcoda) 1))
       (plc (+ t (* (bpmtoedur vcoda) 43)) c10 (* (bpmtoedur vcoda) 1))
       (set! t (+ t (* (bpmtoedur vcoda) 44)))
       t)))

(define chord-counter
  (lambda (ldur)
    (lambda (p)
      (if (null? ldur)
        0)
      (if (equal? p #f)
        (bpmtoedur (car ldur))
        (let ((r (car ldur)))
          (set! ldur (cdr ldur))
          (bpmtoedur r))))))

(define generate-durlist
  (lambda (s i l)
    (cond
      ((null? (cdr l)) '())
      ((zero? i) '())
      (else
        (if (> s (car (car (cdr l))))
          (set! l (cdr l)))
        (let ((a (car (car l)))
             (b (car (car (cdr l))))
             (c (car (cdr (car l))))
             (d (car (cdr (car (cdr l))))))
        (cons (* 1.0 (+ c (* (/ (- d c) (- b a)) (- s a)))) (generate-durlist (+ s 1) (- i 1) l)))))))

(define plc
  (lambda (t l d)
    (cond
      ((null? l) 0)
      (else
        (pln t (car l) d)
        (plc (+ t 1) (cdr l) d)))))

(define play-chord
  (lambda (t c d h)
    (cond
      ((null? c) 0)
      (else
        (cond
          ((= h -1)
            (pln t (car c) (* d (rand-range 0.70 0.82)))
            (play-chord (+ t (rand-range 1 1500)) (cdr c) d h))
          (else
            (pln t (car c) (* d h))
            (play-chord t (cdr c) d h)))))))

(define add-mistake
  (lambda (t c d h)
    (let ((r (random)))
      (cond
        ((not (= h -1)) 0)
        ((< r 0.02) (pln t (+ (random c) 1) (rand-range 2000 5000)))
        ((and (< r 0.04) (> r 0.02)) (pln t (- (random c) 1) (rand-range 2000 5000)))
        (else 0)))))

(define chord-repeater
  (lambda (t c n d h)
    (cond
      ((zero? n) t)
      (else
        (play-chord t c (durlist #f) h)
        (add-mistake t c d h)
        (cond
          ((= h -1) (chord-repeater (+ t (+ (durlist #t) (rand-range -1000 1000))) c (- n 1) (durlist #f) h))
          (else
            (chord-repeater (+ t (durlist #t)) c (- n 1) (durlist #f) h)))))))

(define bpmtoedur
  (lambda (bpm)
    (/ (* 60 *second*) (* 2 bpm))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pre-chorus 2

(define pre-chorus2
  (lambda (t)
    (let* ((sec 44100)
          (br1 '(63 72 85)) ;c sharp
          (br2 '(66 79 87)) ;d
          (br3 '(72 85 93)) ;e
          (s 0)
          (art 0.2)
          (loop (lambda (sc)
                  (cond
                    ((null? sc) 0)
                    (else
                      (let ((cmd (car sc)))
                        (arp t (eval (car cmd)) (eval (cadr cmd)) (* sec (eval (caddr cmd))))
                        (set! t (+ t (* (caddr cmd) sec) (* (eval (cadddr cmd)) sec)))
                        (loop (cdr sc))))))))
            (set! t (+ t (* 16 *second*)))
            (loop '((br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12)   (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)   (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art)    (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 13)

            (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 20)

            (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 4.7)

            (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 17)

            (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 49)

            (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 art) (br1 s 1.88 0.12) (br1 s 0.25 0.12) (br1 s 0.06 0.88) (br1 s 0.03 0)))
            t)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; chorus 2

(define chorus2
  (lambda (t)
    (set! durlist (chord-counter (generate-durlist 0 544 '((0 75) (545 75)))))
    (let* ((c1 '(79 88 100)) ;'(73 82 94)) ;e minor
           (c2 '(82 94 103)) ;'(77 88 98)) ;f major
           (c3 '(88 100 109)) ;'(82 94 103)) ;g major
           (c4 '(94 103 115)) ;'(88 98 109)) ;a minor
           (c5 '(64 73 85)) ;'(58 67 79)) ;b minor
           (h -1)
           (m 0.5)
           (loop (lambda (sc)
                   (cond
                     ((null? sc) 0)
                     (else
                       (set! t (chord-repeater t (eval (car (car sc))) (eval (car (cdr (car sc)))) (bpmtoedur 75) (eval (car (cdr (cdr (car sc)))))))
                       (loop (cdr sc)))))))
       (callback (+ t (* 20 *second*)) 'motor 0)
       (callback (+ t (* 69 *second*)) 'motor 1)
       (callback (+ t (* 85 *second*)) 'motor 0)
       (callback (+ t (* 127 *second*)) 'motor-pulse 1.5)
       (callback (+ t (* 136 *second*)) 'motor-pulse 1.3)
       (callback (+ t (* 151 *second*)) 'motor-pulse 1.5)
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m) (c5 3 m) (c1 5 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 8 m)))
       (loop '((c1 8 m) (c2 8 m) (c3 3 m) (c4 5 m) (c1 7 m)))
       (callback (+ t (* 4 *second*)) 'motor 1)
       t)))

(define motor-pulse
  (lambda (t)
    (motor 1)
    (callback (+ (now) (* t *second*)) 'motor 0)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; bridge (silence)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; verse 3

(define verse3
  (lambda (t)
    (let* ((d (* 4 60 *second*))
           (tinit t)
           (rhcl (fill 43 106))
           (lhcl (fill 43 71))
           (rhc '(72 83 93 106))
           (probrh 0.0)
           (probbroken 0.0)
           (problh 0.0)
           (probirr 0.0)
           (step 1)
           (art 6000)
           (broken 0)
           (brokenstep 3)
           (vel (bpmtoedur 75))
           (lhcom '((begin (rlnt (- t art) 43) (rlnt (- t art) 52) (rlnt (- t art) 73) (rlnt (- t art) 64) (rlnt (- t art) 63) (rlnt (- t art) 51)) () () () (prnt t 73) () (prnt t 69) ()
                    (begin (rlnt (- t art) 69) (prnt t 72) (prnt t 64)) () () () (begin (rlnt (- t art) 64) (rlnt (- t art) 72) (prnt t 63)) () (prnt t 57) ()
                    (begin (rlnt (- t art) 63) (rlnt (- t art) 57) (prnt t 51) (prnt t 63) (prnt t 64) ) () () () (prnt t 52) () (begin (rlnt (- t art) 52) (prnt t 49)) ()
                    (begin (rlnt (- t art) 49) (prnt t 52) (prnt t 43)) () () () () () () ()))
           (rhloop (lambda (t)
                     (let ((tvel (if (< (random) probirr) (* vel (random '(0.3 .35 .8 1.0 1.2 1.8 2.9 12))) vel)))
                       (cond
                         ((> t (+ tinit d)) t)
                         ((< (length (remove rhcl rhc)) 10) t)
                         (else
                           (plc t rhc (* tvel 0.7))
                           (eval (nth lhcom step))
                           (cond ((and (> t (+ tinit (* 40 *second*))) (< t (+ tinit (* 41 *second*)))) (set! probbroken 0.03))
                                 ((and (> t (+ tinit (* 25 *second*))) (< t (+ tinit (* 26 *second*)))) (set! probrh 0.02))
                                 ;((and (> t (+ tinit (* 45 *second*))) (< t (+ tinit (* 46 *second*)))) (set! problh 0.0))
                                 ((and (> t (+ tinit (* 150 *second*))) (< t (+ tinit (* 151 *second*)))) (set! probrh 0.15))
                                 ;((and (> t (+ tinit (* 80 *second*))) (< t (+ tinit (* 81 *second*)))) (set! problh 0.0))
                                 ((and (> t (+ tinit (* 180 *second*))) (< t (+ tinit (* 181 *second*)))) (set! probirr 0.3))
                                 ((and (> t (+ tinit (* 240 *second*))) (< t (+ tinit (* 241 *second*)))) (set! probirh 0.5))
                                 ((and (> t (+ tinit (* 250 *second*))) (< t (+ tinit (* 251 *second*)))) (set! probirr 0.8))
                                 ((and (> t (+ tinit (* 270 *second*))) (< t (+ tinit (* 271 *second*)))) (set! probrh 0.75))
                                 ;((and (> t (+ tinit (* 120 *second*))) (< t (+ tinit (* 121 *second*)))) (set! problh 0.0))
                                 (else 0))
                           (if (< (random) problh) (prnt t (random lhcl)))
                           (if (< (random) probrh) (set! rhc (appenda rhc (random (remove rhcl rhc)))))
                           (if (and (< (random) probbroken) (= broken 0)) (begin (set! broken (random '(2 3 4 5))) (set! brokenstep (random '(2 3 4 5)))))
                           (if (and (> broken 0) (> step 6)) (begin (set! step (- step brokenstep)) (set! broken (- broken 1)) (rlntl (- t art) '(73 69 72 64 63 57 51 63 64 52 49 52 53))))
                           (if (>= step 32) (set! step 1) (set! step (+ step 1)))
                           (rhloop (+ t tvel)))))))
            (reloop (lambda (t l)
                      (cond
                        ((null? l) t)
                        (else
                          (let ((sel (random l)))
                            (rlnt t sel)
                            (set! l (removea l sel))
                            (reloop (+ t (rand-range 25000 80000)) l)))))))
          (set! t (rhloop t))
          (rlntl t rhcl)
          (rlntl t lhcl)
          (set! t (+ t (* 2 *second*)))
          (prct t lhcl)
          (prct t rhcl)
          (set! t (reloop (+ t (* 2 *second*)) (remove rhcl '(78 88 100))))
          t)))

(define fill
  (lambda (s e)
    (cond
      ((> s e) '())
      (else
        (cons s (fill (+ s 1) e))))))

(define rlntl
  (lambda (t l)
    (cond
      ((null? l) 0)
      (else
        (rlnt t (car l))
        (rlntl (+ t 1) (cdr l))))))

(define prct
  (lambda (t l)
    (cond
      ((null? l) 0)
      (else
        (prnt t (car l))
        (prct (+ t 1) (cdr l))))))

(define remove
  (lambda (l al)
    (cond
      ((null? al) l)
      (else
        (remove (rember l (car al)) (cdr al))))))

(define rember
  (lambda (l a)
    (cond
      ((null? l) '())
      ((equal? (car l) a) (rember (cdr l) a))
      (else
        (cons (car l) (rember (cdr l) a))))))

(define nth
  (lambda (l i)
    (cond
      ((= i 1) (car l))
      (else
        (nth (cdr l) (- i 1))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; chorus 3

(define medpool '(78 87 99 79 88 100))
(define rootpool '(78 88 100))
(define addpool '())
(define medloop 1)

(define chorus3
  (lambda (t)
    (let ((d (* 6.5 60 *second*)))
      (set! medloop 1)
      (set! medpool '(78 87 99 79 88 100))
      (set! rootpool '(78 88 100))
      (callback (+ t (* 10 *second*)) 'aux-loop)
      (callback (+ t (* 15 *second*)) 'aux-loop)
      (callback (+ t (* 25 *second*)) 'mod-loop)
      (callback (+ t d) 'stop-loops)
      (stop-med-chord (+ t d))
      (callback (+ t d (* 6 60 *second*)) 'motor 0)
      (+ t d))))

(define stop-loops
  (lambda ()
    (set! medloop 0)))

(define stop-med-chord
  (lambda (t)
    (rlntl t '(78 87 99 79 88 100))))

(define release-block
  (lambda (t s e)
    (cond
      ((> s e) 0)
      (else
        (rlnt t s)
        (release-block (+ t 1) (+ s 1) e)))))

(define mod-rootpool
  (lambda ()
    (let ((a (random (remove (remove medpool rootpool) addpool)))
          (i (random '(1 2 3))))
      (rlnt (+ (now) (rand-range 10000 30000)) (nth rootpool i))
      (prn a)
      (set! rootpool (replace rootpool a i))
      (print " | modified root: " rootpool))))

(define mod-loop
  (lambda ()
    (cond ((= medloop 0) 0)
          (else
            (mod-rootpool)
            (callback (+ (now) (rand-range (* 20 *second*) (* 30 *second*))) 'mod-loop)))))

(define aux-loop
  (lambda ()
    (cond ((= medloop 0) 0)
          (else
            (add-aux-note)
            (callback (+ (now) (rand-range (* 40 *second*) (* 50 *second*))) 'aux-loop)))))

(define replace
  (lambda (l a i)
    (cond
      ((null? l) '())
      ((= i 1) (cons a (cdr l)))
      (else
        (cons (car l) (replace (cdr l) a (- i 1)))))))

(define add-aux-note
  (lambda ()
    (let ((a (random (remove (remove medpool rootpool) addpool)))
          (d (rand-range (* 10 *second*) (* 25 *second*))))
      (pln (now) a d)
      (set! addpool (appenda addpool a))
      (callback (+ (now) d) 'remove-aux-note a)
      (print " | addlist: " addpool))))

(define remove-aux-note
  (lambda (a)
    (set! addpool (removea addpool a))))

(define appenda
  (lambda (l a)
    (cond
      ((null? l) (cons a '()))
      (else
        (cons (car l) (appenda (cdr l) a))))))

(define removea
  (lambda (l a)
    (cond
      ((null? l) '())
      ((equal? (car l) a) (cdr l))
      (else
        (cons (car l) (removea (cdr l) a))))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; decoration

(define tv
  (lambda (t)
    (let* ((s (+ t (rand-range (* 10 *second*) (* 60 *second*))))
          (e (+ s (rand-range (* 20 *second*) (* 120 *second*))))
          (newt (+ e (rand-range (* 30 *second*) (* 100 *second*)))))
      (callback s 'lamp 1)
      (callback e 'lamp 0)
      (callback (+ t 1000) 'tv newt))))

;(tv (now))



(println "implanted-memories loaded, ready for execution")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; rehearsal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;(intro (now))
;(verse1 (now))
;(pre-chorus1 (now))
;(chorus1 (now))
;(pre-chorus2 (now))
;(chorus2 (now))
;[bridge, silence]
;(verse3 (now))
;(chorus3 (now))

;(chorus3 (verse3 (now)))

;(init-system)
;(motor 0)
;(motor 1)
;(lamp 1)
;(panic)
;(motor-pulse 1)
;(shutdown-system)

;(video-start (now))
;(video-stop (now))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; trouble shooting

;(rln 43)
;(prn 100)
;(rln 100)

(define swipe
  (lambda (t s l)
    (cond
      ((null? l) t)
      (else
        (pln t (car l) (* s .4))
        (callback (+ (* 0.5 s) t) 'swipe (+ t s) s (cdr l))))))

(swipe (now) 11100 (fill 1 138))

(define panic
  (lambda ()
    (release-block (+ (now) 5000) 1 138)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; performance
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(define execute-piece
;  (lambda (t)
;    (let ((endtime (chorus3 (verse3 (+ (* 4 60 *second*) (chorus2 (pre-chorus2 (chorus1 (pre-chorus1 (verse1 (intro t)))))))))))
;      (println "implanted memories: duration (m) = " (/ (- endtime t) 44100. 60)))))

(define execute-piece
  (lambda (t)
    (let* ((t-intro (intro t))
          (t-verse1 (verse1 t-intro))
          (t-pre-chorus1 (pre-chorus1 t-verse1))
          (t-chorus1 (chorus1 t-pre-chorus1))
          (t-pre-chorus2 (pre-chorus2 t-chorus1))
          (t-chorus2 (chorus2 t-pre-chorus2))
          (t-start-verse3 (+ t-chorus2 (* 4 60 *second*)))
          (t-verse3 (verse3 t-start-verse3))
          (t-chorus3 (chorus3 t-verse3)))
      (video-start (+ t-chorus2 (* 0 *second*)))
      (video-stop (+ t-chorus2 (* 4 60 *second*)))
      (println "duration intro: " t-intro)
      (println "duration verse1: " t-verse1)
      (println "duration pre-chorus1: " t-pre-chorus1)
      (println "duration chorus1: " t-chorus1)
      (println "duration pre-chorus2: " t-pre-chorus2)
      (println "duration chorus2: " t-chorus2)
      (println "duration verse3: " t-verse3)
      (println "duration chorus3: " t-chorus3)
      (println "implanted memories: duration (m) = " (/ (- t-chorus3 t) 44100. 60)))))

;(execute-piece (+ (now) (* 5 60 *second*)))
;(execute-piece (+ (now) 1))
;(intro (now))
